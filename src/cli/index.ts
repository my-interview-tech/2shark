#!/usr/bin/env node

import { Command } from 'commander';
import { initDatabase, clearDatabase } from '../database';
import { parseDatabase, filterChangedFiles, loadYAMLContent } from '../docScanner';
import { saveDocuments } from '../helpers';
import { CheckUpdatesOptions, ParseDbOptions, ScanOptions, TechnologyMapping, UpdateArticlesOptions } from '../types';
import {
  CHECK_UPDATES,
  CLEAR_DB,
  COMMAND_DESCRIPTION,
  COMMAND_NAME,
  COMMAND_VERSION,
  CONFIG_PATH,
  DOCS_PATH,
  flagsCheckOnly,
  flagsClear,
  flagsConfig,
  flagsForce,
  flagsPath,
  INIT_DB,
  PARSE_DB,
  UPDATE_ARTICLES,
} from '../constants';
import packageJson from '../../package.json';

async function main() {
  const program = new Command();

  program
    .name(packageJson?.name || COMMAND_NAME)
    .description(packageJson?.description || COMMAND_DESCRIPTION)
    .version(packageJson?.version || COMMAND_VERSION);

  program.on('command:*', (command: string) => {
    console.error(`Unknown command: ${command}`);
    program.help();
  });

  program
    .command(INIT_DB)
    .description('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    .action(async () => {
      try {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await initDatabase();
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
      }
    });

  program
    .command(CLEAR_DB)
    .description('–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    .action(async () => {
      try {
        console.log('–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await clearDatabase();
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
      }
    });

  // todo: –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
  program
    .command(PARSE_DB)
    .description('–ü–∞—Ä—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    .option(flagsPath, '–ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', DOCS_PATH)
    .option(flagsConfig, '–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º', CONFIG_PATH)
    .option(flagsClear, '–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º') // todo: —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –∫–∞–∂–µ—Ç—Å—è –Ω–µ –Ω–∞–¥–æ, –ª—É—á—à–µ –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ —Ñ–ª–æ—É –æ—á–∏—Å—Ç–∫–∏ –ë–î –≤—Ä—É—á–Ω—É—é, –∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É–∂–µ –ë–î –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–µ–π—Å—ã
    .option(flagsCheckOnly, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è') // todo: —Ç–æ–∂–µ –Ω–µ –Ω–∞–¥–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏
    .action(async (options: ParseDbOptions) => {
      try {
        if (options.checkOnly) {
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');

          const configDir = options.configDir || CONFIG_PATH;

          const scanOptions: ScanOptions = {
            docsPath: options.path,
            configPath: {
              technologyPath: `${configDir}/category-mapping.yaml`,
              specialtiesPath: `${configDir}/specialties.yaml`,
            },
          };

          const documents = await parseDatabase(scanOptions);
          const changedFiles = await filterChangedFiles(documents);

          console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
          console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${documents.length}`);
          console.log(`   –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${changedFiles.length}`);
          console.log(`   –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${documents.length - changedFiles.length}`);

          if (changedFiles.length === 0) {
            console.log('\n‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
          } else {
            console.log(`\nüîÑ –ù–∞–π–¥–µ–Ω–æ ${changedFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
          }
          return;
        }

        console.log('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');

        if (options.clear) {
          console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
          await clearDatabase();
        }

        const configDir = options.configDir || CONFIG_PATH;
        const technologyMapping = await loadYAMLContent(options.config);
        const specialtyMapping = await loadYAMLContent(`${configDir}/specialties.yaml`);
        const scanOptions: ScanOptions = {
          docsPath: options.path,
          configPath: {
            technologyPath: options.config,
            specialtiesPath: `${configDir}/specialties.yaml`,
          },
        };

        const documents = await parseDatabase(scanOptions);
        console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        try {
          await saveDocuments(documents, undefined, technologyMapping as TechnologyMapping, specialtyMapping);
          console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
          console.error('\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:');
          if (error instanceof Error) {
            console.error(`   ${error.message}`);
          } else {
            console.error(`   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
          }
          process.exit(1);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
        process.exit(1);
      }
    });

  // todo: –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
  program
    .command(CHECK_UPDATES)
    .description('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    .option(flagsPath, '–ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', DOCS_PATH)
    .option(flagsConfig, '–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º', CONFIG_PATH)
    .option(flagsCheckOnly, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    .action(async (options: CheckUpdatesOptions) => {
      try {
        try {
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
          const configDir = options.configDir || CONFIG_PATH;

          const scanOptions: ScanOptions = {
            docsPath: options.path,
            configPath: {
              technologyPath: `${configDir}/category-mapping.yaml`,
              specialtiesPath: `${configDir}/specialties.yaml`,
            },
          };

          const documents = await parseDatabase(scanOptions);
          const changedFiles = await filterChangedFiles(documents);

          console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
          console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${documents.length}`);
          console.log(`   –¢—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${changedFiles.length}`);
          console.log(`   –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${documents.length - changedFiles.length}`);

          if (changedFiles.length === 0) {
            console.log('\n‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
          } else {
            console.log(`\nüîÑ –ù–∞–π–¥–µ–Ω–æ ${changedFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
          process.exit(1);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
        process.exit(1);
      }
    });

  // todo: –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
  program
    .command(UPDATE_ARTICLES)
    .description('–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    .option(flagsPath, '–ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', DOCS_PATH)
    .option(flagsConfig, '–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º', CONFIG_PATH)
    .option(flagsForce, '–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏') // todo: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    .action(async (options: UpdateArticlesOptions) => {
      try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π...');

        const configDir = options.configDir || CONFIG_PATH;

        const scanOptions: ScanOptions = {
          docsPath: options.path,
          configPath: {
            technologyPath: `${configDir}/category-mapping.yaml`,
            specialtiesPath: `${configDir}/specialties.yaml`,
          },
        };

        const documents = await parseDatabase(scanOptions);
        let filesToUpdate = documents;

        if (!options.force) {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          filesToUpdate = await filterChangedFiles(documents);
        }

        if (filesToUpdate.length === 0) {
          console.log('\n‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
          return;
        }

        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
        console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${documents.length}`);
        console.log(`   –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${filesToUpdate.length}`);
        console.log(`   –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${documents.length - filesToUpdate.length}`);

        if (!options.force) {
          console.log(`\nüîÑ –ù–∞–π–¥–µ–Ω–æ ${filesToUpdate.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
          console.log('='.repeat(50));

          filesToUpdate.forEach((file, index) => {
            console.log(`${index + 1}. ${file.title}`);
            console.log(`   ID: ${file.id}`);
            console.log(`   –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${file.specialty}`);
            console.log(`   –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${file.technology}`);
            console.log('');
          });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        try {
          await saveDocuments(filesToUpdate);
          console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${filesToUpdate.length} —Å—Ç–∞—Ç–µ–π`);
        } catch (error) {
          console.error('\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:');
          if (error instanceof Error) {
            console.error(`   ${error.message}`);
          } else {
            console.error(`   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
          }
          process.exit(1);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
        process.exit(1);
      }
    });

  await program.parseAsync();
}

main().catch((error) => {
  console.error('Critical error:', error);
  process.exit(1);
});
