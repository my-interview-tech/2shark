import { DocItem } from '../../types';

// todo: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∑ parseDatabase
import { getFileHashes } from '../getFileHashes/getFileHashes';
// import fs from "fs/promises"

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
 *
 * @param documents - –ú–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
 *
 * @example
 * ```typescript
 * const changedDocs = await filterChangedFiles(allDocuments);
 * console.log(`–ù–∞–π–¥–µ–Ω–æ ${changedDocs.length} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);
 * ```
 */
export async function filterChangedFiles(documents: DocItem[]): Promise<DocItem[]> {
  try {
    const existingHashes = await getFileHashes();

    console.log(`üîç –û—Ç–ª–∞–¥–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${existingHashes.size} —Ö–µ—à–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

    if (existingHashes.size > 0) {
      console.log(`üîç –ü—Ä–∏–º–µ—Ä—ã —Ö–µ—à–µ–π –≤ –ë–î:`);
      let count = 0;

      for (const [slug, hash] of existingHashes.entries()) {
        if (count < 3) {
          console.log(`   ${slug}: ${hash.substring(0, 10)}...`);
          count++;
        }
      }
    }

    const changedDocuments: DocItem[] = [];
    let unchangedCount = 0;

    let debugCount = 0;
    for (const doc of documents) {
      let existingHash: string | undefined;

      for (const [slug, hash] of existingHashes.entries()) {
        if (slug.startsWith(doc.id + '-')) {
          existingHash = hash;
          break;
        }
      }

      if (!existingHash) {
        changedDocuments.push(doc);

        if (debugCount < 3) {
          console.log(`üîç –û—Ç–ª–∞–¥–∫–∞: –Ω–æ–≤—ã–π —Ñ–∞–π–ª ${doc.id} (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î)`);
          debugCount++;
        }
        continue;
      }

      if (existingHash === doc.file_hash) {
        unchangedCount++;

        continue;
      }

      changedDocuments.push(doc);

      if (debugCount < 3) {
        console.log(`üîç –û—Ç–ª–∞–¥–∫–∞: –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${doc.id}`);
        console.log(`   –•–µ—à –≤ –ë–î: ${existingHash.substring(0, 10)}...`);
        console.log(`   –ù–æ–≤—ã–π —Ö–µ—à: ${doc.file_hash.substring(0, 10)}...`);
        debugCount++;
      }
    }

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`);
    console.log(`   - –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${changedDocuments.length}`);
    console.log(`   - –ù–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${unchangedCount}`);
    console.log(`   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${documents.length}`);

    return changedDocuments;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);

    return documents;
  }
}
