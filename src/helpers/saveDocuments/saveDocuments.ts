import { Pool } from 'pg';
import { DocItem, DatabaseConfig, SpecialtyMapping } from '../../types';
import { DB_CONFIG } from '../../config';
import { SCHEMA } from '../../schema';

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 *
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:
 * - specialties: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
 * - technologies: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
 * - articles: —Å—Ç–∞—Ç—å–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * - tags: —Ç–µ–≥–∏
 * - article_tags: —Å–≤—è–∑—å —Å—Ç–∞—Ç–µ–π –∏ —Ç–µ–≥–æ–≤
 *
 * @param documents - –ú–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @param config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param technologyMapping - –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param specialtyMapping - –ú–∞–ø–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns Promise –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 *
 * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export async function saveDocuments(
  documents: DocItem[],
  config?: DatabaseConfig,
  technologyMapping?: Record<string, { specialty: string | string[]; priority?: number; description?: string }>,
  specialtyMapping?: SpecialtyMapping,
): Promise<void> {
  const dbConfig = config || DB_CONFIG;
  const pool = new Pool(dbConfig);
  const client = await pool.connect();

  try {
    await client.query('BEGIN');

    const specialties = new Map<string, { name: string; slug: string; priority: number }>();
    const technologies = new Map<string, { name: string; slug: string; priority: number }>();

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ specialtyMapping
    if (specialtyMapping) {
      console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º specialtyMapping –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...');
      for (const [specialtyName, specialtyConfig] of Object.entries(specialtyMapping)) {
        console.log(`  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${specialtyName}, –ö–æ–Ω—Ñ–∏–≥:`, specialtyConfig);

        specialties.set(specialtyName, {
          name: specialtyName,
          slug: specialtyName.toLowerCase().replace(/\s+/g, '-'),
          priority: specialtyConfig.priority || 0,
        });
        console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${specialtyName}`);
      }
    }

    // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ technologyMapping (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (technologyMapping) {
      console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º technologyMapping –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...');
      for (const [techName, techMapping] of Object.entries(technologyMapping)) {
        console.log(`  –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è: ${techName}, –ú–∞–ø–ø–∏–Ω–≥:`, techMapping);
        if (techMapping && techMapping.specialty) {
          let specialtiesList: string[];

          if (Array.isArray(techMapping.specialty)) {
            specialtiesList = techMapping.specialty;
          } else if (typeof techMapping.specialty === 'string' && techMapping.specialty.includes(',')) {
            specialtiesList = techMapping.specialty.split(',').map((s: string) => s.trim());
          } else {
            specialtiesList = [techMapping.specialty];
          }

          console.log(`  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è ${techName}:`, specialtiesList);

          for (const specialty of specialtiesList) {
            if (!specialties.has(specialty)) {
              specialties.set(specialty, {
                name: specialty,
                slug: specialty.toLowerCase().replace(/\s+/g, '-'),
                priority: techMapping.priority || 0,
              });
              console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${specialty}`);
            }
          }
        }
      }
    }

    // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    for (const doc of documents) {
      if (!technologies.has(doc.technology)) {
        technologies.set(doc.technology, {
          name: doc.technology,
          slug: doc.technology.toLowerCase().replace(/\s+/g, '-'),
          priority: doc.priority,
        });
      }
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: ${specialties.size}`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: ${technologies.size}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const specialtyIds = new Map<string, number>();
    for (const [key, specialty] of specialties) {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${specialty.name}`);

      const result = await client.query(SCHEMA.UPSERT_SPECIALTY_QUERY, [
        specialty.name,
        specialty.slug,
        specialty.priority,
      ]);

      specialtyIds.set(key, result.rows[0].id);
      console.log(`  ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ${specialty.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: ${result.rows[0].id}`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const technologyIds = new Map<string, number>();
    for (const [key, technology] of technologies) {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é: ${technology.name}`);
      const result = await client.query(SCHEMA.UPSERT_TECHNOLOGY_QUERY, [
        technology.name,
        technology.slug,
        technology.priority,
      ]);
      technologyIds.set(key, result.rows[0].id);
      console.log(`  ‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è ${technology.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: ${result.rows[0].id}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
    console.log('üîó –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏...');
    for (const [techName, techMapping] of Object.entries(technologyMapping || {})) {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
      if (!technologies.has(techName)) {
        technologies.set(techName, {
          name: techName,
          slug: techName.toLowerCase().replace(/\s+/g, '-'),
          priority: techMapping.priority || 0,
        });
        console.log(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: ${techName}`);
      }

      const technologyId = technologyIds.get(techName);
      if (!technologyId) {
        console.log(`  ‚ö†Ô∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è ${techName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö`);
        continue;
      }

      if (techMapping && techMapping.specialty) {
        let specialtiesList: string[];

        if (Array.isArray(techMapping.specialty)) {
          specialtiesList = techMapping.specialty;
        } else if (typeof techMapping.specialty === 'string' && techMapping.specialty.includes(',')) {
          specialtiesList = techMapping.specialty.split(',').map((s: string) => s.trim());
        } else {
          specialtiesList = [techMapping.specialty];
        }

        for (const specialty of specialtiesList) {
          const specialtyId = specialtyIds.get(specialty);
          if (specialtyId) {
            console.log(`  üîó –°–≤—è–∑—ã–≤–∞–µ–º ${techName} —Å ${specialty}`);
            await client.query(SCHEMA.UPSERT_SPECIALTY_TECHNOLOGY_QUERY, [specialtyId, technologyId, techName]);
          }
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏
    for (const doc of documents) {
      const technologyId = technologyIds.get(doc.technology);

      if (!technologyId) {
        console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—å—é ${doc.title}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ technology`);
        continue;
      }

      const mapping = technologyMapping?.[doc.technology];
      let specialties: string[];

      if (mapping) {
        if (Array.isArray(mapping.specialty)) {
          specialties = mapping.specialty;
        } else if (typeof mapping.specialty === 'string' && mapping.specialty.includes(',')) {
          specialties = mapping.specialty.split(',').map((s: string) => s.trim());
        } else {
          specialties = [mapping.specialty];
        }
      } else {
        specialties = [doc.specialty];
      }

      for (const specialty of specialties) {
        const specialtyId = specialtyIds.get(specialty);

        if (!specialtyId) {
          console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—å—é ${doc.title} –¥–ª—è specialty ${specialty}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ specialty`);
          continue;
        }

        const uniqueSlug = `${doc.id}-${specialty.toLowerCase().replace(/\s+/g, '-')}`;

        const articleResult = await client.query(SCHEMA.INSERT_ARTICLE_QUERY, [
          doc.title,
          uniqueSlug,
          doc.content,
          specialtyId,
          technologyId,
          doc.priority,
          doc.description,
          doc.file_hash,
        ]);

        const articleId = articleResult.rows[0].id;

        for (const tagName of doc.tags) {
          const tagResult = await client.query(SCHEMA.INSERT_TAG_QUERY, [tagName]);
          const tagId = tagResult.rows[0].id;

          await client.query(SCHEMA.INSERT_ARTICLE_TAG_QUERY, [articleId, tagId]);
        }

        for (const url of doc.info) {
          await client.query(SCHEMA.INSERT_ARTICLE_LINK_QUERY, [articleId, url]);
        }
      }
    }

    await client.query('COMMIT');
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}
